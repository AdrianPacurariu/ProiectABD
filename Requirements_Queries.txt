First-Time Setup:

Inside Windows terminal, type the following command to start a Docker container where mongoDB is ran.

> docker run -d --name mongo-on-docker -p 27888:27017 -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo

You can put any username you want instead of "mongoadmin" and same goes for password.

For the following mongoimport command, please make sure that the uszips.csv is saved in the same folder where you are running the terminal, otherwise give the
full path onto the "file" argument. This command is used to import the .csv file.

> mongoimport --db=abdProject --collection=zips --type=csv --headerline "mongodb://mongoadmin:secret@localhost:27888/?authSource=admin" --file=uszips.csv --ignoreBlanks

Connect to the mongoDB shell:

> mongosh "mongodb://mongoadmin:secret@localhost:27888/?authSource=admin"

Create the database, called abdProject:

> use abdProject

Checking that the import was successful. We should have 33787 entries.

> db.zips.countDocuments();


------ SOLUTION DELIVERY ------

Mostly, I will try to keep it as simple as possible..
I will use some of the aggregation stages, like $group, $match, $project and $set.
$group is used to separate the documents by the fields we need.
$match is used to filter the documents, so only documents that contain our criteria are relevant.
$project helps us pass the output through the pipeline and to include/exclude fields. 1 means true aka we want to include that field into the output document, 0 means false aka not.

a) Get the states with a total population of over 10 million.

db.zips.aggregate( [
    { "$group": {"_id": "$state_id", "state_name": { "$first": "$state_name" }, "state_population": {"$sum": "$population"}} },
    { "$match": {"state_population": {"$gt": 10 * 1000000}} }
] )

b) Get the average city population by state.

db.zips.aggregate( [
    { "$group": {"_id": {"state_id": "$state_id", "city": "$city", "state_name": "$state_name"}, "population": {"$sum": "$population"}} },
    { "$group": {"_id": "$_id.state_id", "state_name": { "$first": "$_id.state_name" }, "average_city_population": {"$avg": "$population"}} },
    { "$project": { "state_id": "$_id", "state_name": 1, "average_city_population": { "$round": ["$average_city_population", 0] }, "_id": 0}}
] )

c) Get the largest and the smallest city in each state.

db.zips.aggregate( [
   { "$group": {"_id": { "state_id": "$state_id", "city": "$city", "state_name": "$state_name" }, "population": {"$sum": "$population"}} },
   { "$sort": {"population": 1} },
   { "$group": {"_id" : "$_id.state_id", "smallest_city" : { "$first": "$_id.city" }, "smallest_population" : { "$first": "$population" }, "largest_city" : { "$last" : "$_id.city" }, "largest_population" : { "$last" : "$population" }} }
] )

d) Get the largest and the smallest counties in each state.

db.zips.aggregate( [
   { "$group": {"_id": { "state_id": "$state_id", "county_name": "$county_name" }, "population": { "$sum": "$population" }} },
   { "$sort": { "population": 1 } },
   { "$group": {"_id" : "$_id.state_id", "smallest_county" : { "$first": "$_id.county_name" }, "smallest_population" : { "$first": "$population" }, "largest_county" : { "$last" : "$_id.county_name" }, "largest_population" : { "$last" : "$population" }} }
] )

e) Get the nearest 10 zips from one of Chicago's landmarks, the Willis Tower situated at coordinates 41.878876, -87.635918.

First we create the index for the 2dsphere:

db.zips.createIndex( { location_2d : "2dsphere" } )

Material for this: 
- https://www.mongodb.com/docs/manual/core/indexes/index-types/geospatial/2dsphere/
- https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/

Afterwards, using updateMany we will update all the documents at once to have the new geo field.

db.zips.updateMany(
    {},
    [
        {"$set": {"location_2d.type": "Point", "location_2d.coordinates": ["$lng", "$lat"] }}
    ]
)

Lastly, filter the 10 nearest zip codes from our coordinates.

db.zips.aggregate([
   {
     $geoNear: {
        near: { type: "Point", coordinates: [ -87.635918, 41.878876 ] },
        key: "location_2d",
        distanceField: "dist.calculated",
     }
   },
   { $limit: 10 }
])

f) Get the total population situated between 50 and 200 kms around New York's landmark, the Statue of Liberty at coordinates 40.689247, -74.044502.